// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vitalykrupin/url-shortener/internal/app/storage (interfaces: StorageKeeper)

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageKeeper is a mock of StorageKeeper interface.
type MockStorageKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockStorageKeeperMockRecorder
}

// MockStorageKeeperMockRecorder is the mock recorder for MockStorageKeeper.
type MockStorageKeeperMockRecorder struct {
	mock *MockStorageKeeper
}

// NewMockStorageKeeper creates a new mock instance.
func NewMockStorageKeeper(ctrl *gomock.Controller) *MockStorageKeeper {
	mock := &MockStorageKeeper{ctrl: ctrl}
	mock.recorder = &MockStorageKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageKeeper) EXPECT() *MockStorageKeeperMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStorageKeeper) Add(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockStorageKeeperMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStorageKeeper)(nil).Add), arg0, arg1)
}

// Close mocks base method.
func (m *MockStorageKeeper) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageKeeperMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageKeeper)(nil).Close))
}

// GetAlias mocks base method.
func (m *MockStorageKeeper) GetAlias(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlias", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias.
func (mr *MockStorageKeeperMockRecorder) GetAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockStorageKeeper)(nil).GetAlias), arg0)
}

// GetURL mocks base method.
func (m *MockStorageKeeper) GetURL(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockStorageKeeperMockRecorder) GetURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockStorageKeeper)(nil).GetURL), arg0)
}

// LoadJSONfromFS mocks base method.
func (m *MockStorageKeeper) LoadJSONfromFS(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadJSONfromFS", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadJSONfromFS indicates an expected call of LoadJSONfromFS.
func (mr *MockStorageKeeperMockRecorder) LoadJSONfromFS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadJSONfromFS", reflect.TypeOf((*MockStorageKeeper)(nil).LoadJSONfromFS), arg0)
}

// Ping mocks base method.
func (m *MockStorageKeeper) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageKeeperMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorageKeeper)(nil).Ping))
}

// SaveJSONtoFS mocks base method.
func (m *MockStorageKeeper) SaveJSONtoFS(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveJSONtoFS", arg0)
}

// SaveJSONtoFS indicates an expected call of SaveJSONtoFS.
func (mr *MockStorageKeeperMockRecorder) SaveJSONtoFS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveJSONtoFS", reflect.TypeOf((*MockStorageKeeper)(nil).SaveJSONtoFS), arg0)
}
